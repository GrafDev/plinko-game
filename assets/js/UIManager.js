import {baseConfig, config, updateSizesBasedOnRows} from './config.js';
import Matter from 'matter-js';
import WinModalManager from "./WinModalManager.js";
import TargetWinsCalculator from "./TargetWinsCalculator.js";

class UIManager {
    constructor(gameInstance) {
        this.game = gameInstance;

        this.ballCount = config.defaultBallCount || 1;
        this.maxBallCount = config.maxBallCount || 10;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è, —á—Ç–æ –æ–Ω –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        this.balance = Math.max(0, config.initialBalance || 50);
        this.ballCost = config.ballCost || 10;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–æ—Å–∫–æ–≤ (—à–∞—Ä–æ–≤) –∏ –≤—ã–∏–≥—Ä—ã—à–µ–π
        this.throwsLeft = config.maxBalls || 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤
        this.winsAmount = 0;

        // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞
        this.isFirstBetPlaced = false;

        // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã (–∫–æ–≥–¥–∞ –∫–∞—Ç—è—Ç—Å—è —à–∞—Ä–∏–∫–∏)
        this.isGameActive = false;

        // –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.winModalManager = null;

        // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–∞–π–¥–µ—Ä—ã
        this.rowsSlider = null;
        this.ballsSlider = null;

        // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤ (–¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        this.sliders = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ planTargetsBins
        this.planTargetBinsIndex = 0;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
    updateRemainingBalls() {
        const balanceDisplay = document.getElementById('balance-display');
        if (balanceDisplay) {
            // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —à–∞—Ä–æ–≤ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
            const remainingAfterBet = Math.max(0, this.throwsLeft - this.ballCount);
            balanceDisplay.textContent = `Balls remaining: ${remainingAfterBet}`;
        }
    }

    initialize() {
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.cleanup();

        this.createMoneyBetUI();
        this.updateBalanceDisplay(); // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.updateThrowsAndWins();  // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        this.createWinsDisplay();
        this.createSliders();
        this.createDebugInput();
        this.setupBetButton();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.winModalManager = new WinModalManager(this.game);
        this.winModalManager.initialize();

        // –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤
        this.updateRemainingBalls();
        this.initializeTargetBins();
    }

    showWinModal(winsAmount) {
        if (this.winModalManager) {
            this.winModalManager.showWinModal(winsAmount);
        }
    }

    createMoneyBetUI() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const existingContainer = document.querySelector('.money-bet-container');
        if (existingContainer) {
            console.log('Money bet container already exists, skipping creation');
            return;
        }

        const moneyBetContainer = document.createElement('div');
        moneyBetContainer.className = 'money-bet-container';

        const balanceDisplay = document.createElement('div');
        balanceDisplay.id = 'balance-display';
        balanceDisplay.className = 'balance-display';
        balanceDisplay.textContent = `–®–∞—Ä–æ–≤: ${this.throwsLeft}`;

        moneyBetContainer.appendChild(balanceDisplay);
        this.game.container.appendChild(moneyBetContainer);
    }

    createWinsDisplay() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
        const winsContainer = document.getElementById('wins-container');
        if (!winsContainer) {
            console.error('Wins container not found, cannot create wins display');
            return;
        }

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        winsContainer.innerHTML = '';

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
        const winsDisplay = document.createElement('div');
        winsDisplay.id = 'wins-display';
        winsDisplay.className = 'balance-display'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–ª—å, —á—Ç–æ –∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        winsDisplay.textContent = `Wins: $${this.winsAmount}`;

        winsContainer.appendChild(winsDisplay);
    }

    updateBalanceDisplay() {
        const balanceDisplay = document.getElementById('balance-display');
        if (balanceDisplay) {
            balanceDisplay.textContent = `–ë–∞–ª–∞–Ω—Å: $${this.balance}`;
        }
    }

// –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞ —Ü–µ–ª–µ–≤—ã—Ö –ª—É–Ω–æ–∫
    initializeTargetBins() {
        // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
        if (config.planTargetsBins?.length > 0 && this.planTargetBinsIndex < config.planTargetsBins.length) {
            console.log("‚úÖ –ü–ª–∞–Ω —Ü–µ–ª–µ–≤—ã—Ö –ª—É–Ω–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º");
            return;
        }

        if (config.targetWins > 0 && this.game.binsManager) {
            console.log('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Ü–µ–ª–µ–≤—ã—Ö –ª—É–Ω–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞:', config.targetWins);

            setTimeout(() => {
                const targetWinsCalculator = new TargetWinsCalculator(this.game, this.game.binsManager);
                const success = targetWinsCalculator.applyTargetDistribution();

                if (success) {
                    config.planTargetsBins = [...config.targetBins]; // –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                    this.planTargetBinsIndex = 0;
                    console.log('‚úÖ –¶–µ–ª–µ–≤—ã–µ –ª—É–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–ª–∞–Ω:', config.planTargetsBins);
                } else {
                    console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –ª—É–Ω–∫–∏');
                }
            }, 300);
        } else {
            console.log('‚è© –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ª—É–Ω–æ–∫:', {
                'config.targetWins': config.targetWins,
                'binsManager –¥–æ—Å—Ç—É–ø–µ–Ω': !!this.game.binsManager
            });
        }
    }



    updateThrowsAndWins() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤
        const balanceDisplay = document.getElementById('balance-display');
        if (balanceDisplay) {
            balanceDisplay.textContent = `–®–∞—Ä–æ–≤: ${this.throwsLeft}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã –≤—ã–∏–≥—Ä—ã—à–∞
        const winsDisplay = document.getElementById('wins-display');
        if (winsDisplay) {
            winsDisplay.textContent = `Wins: $${this.winsAmount}`;
        }
    }

    createSliders() {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
        const slidersContainer = document.getElementById('sliders-container');
        if (!slidersContainer) {
            console.error('Sliders container not found, cannot create sliders');
            return;
        }

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        slidersContainer.innerHTML = '';

        const initialRows = config.rows;

        const rowsContainer = document.createElement('div');
        rowsContainer.className = 'slider-container';

        const rowsLabel = document.createElement('label');
        rowsLabel.className = 'slider-label';
        rowsLabel.textContent = 'Rows';
        rowsContainer.appendChild(rowsLabel);

        const rowsSlider = document.createElement('input');
        rowsSlider.type = 'range';
        rowsSlider.className = 'slider';
        rowsSlider.min = (baseConfig.rows-4).toString();
        rowsSlider.max = baseConfig.rows.toString();
        rowsSlider.value = initialRows.toString();
        rowsContainer.appendChild(rowsSlider);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–∞–π–¥–µ—Ä rows
        this.rowsSlider = rowsSlider;

        // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω –ø–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫, –±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä
        if (this.isFirstBetPlaced) {
            this.rowsSlider.disabled = true;
            this.rowsSlider.style.opacity = '0.5';
            this.rowsSlider.style.cursor = 'not-allowed';
        }

        const ballsContainer = document.createElement('div');
        ballsContainer.className = 'slider-container';

        const ballsLabel = document.createElement('label');
        ballsLabel.className = 'slider-label';
        ballsLabel.textContent = 'Balls At Once';
        ballsContainer.appendChild(ballsLabel);

        const ballsSlider = document.createElement('input');
        ballsSlider.type = 'range';
        ballsSlider.className = 'slider';
        ballsSlider.min = '1';
        ballsSlider.max = this.maxBallCount.toString();
        ballsSlider.value = this.ballCount.toString();
        ballsContainer.appendChild(ballsSlider);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–∞–π–¥–µ—Ä —à–∞—Ä–æ–≤
        this.ballsSlider = ballsSlider;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ —Å–ª–∞–π–¥–µ—Ä–∞ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.sliders = [this.rowsSlider, this.ballsSlider];

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —Å—Å—ã–ª–∞—Ç—å—Å—è –≤ this
        const self = this;

        ballsSlider.addEventListener('input', function() {
            const previousCount = self.ballCount;
            self.ballCount = parseInt(this.value, 10);

            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ
            if (self.ballCount > self.throwsLeft) {
                self.ballCount = self.throwsLeft;
                this.value = self.ballCount.toString();
            }

            const betButton = document.getElementById('bet-button');
            if (betButton) {
                betButton.textContent = `Bet (${self.ballCount})`;

                // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤
                if (self.throwsLeft <= 0) {
                    betButton.disabled = true;
                    betButton.style.opacity = '0.5';
                    betButton.style.cursor = 'not-allowed';
                } else {
                    betButton.disabled = false;
                    betButton.style.opacity = '1';
                    betButton.style.cursor = 'pointer';
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            self.updateRemainingBalls();
        });

        rowsSlider.addEventListener('change', () => {
            const newRows = parseInt(rowsSlider.value, 10);
            if (config.rows !== newRows) {
                const oldRows = config.rows;

                try {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    config.rows = newRows;

                    // –í–ê–ñ–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –ª—É–Ω–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—è–¥–æ–≤
                    config.planTargetsBins = [];
                    config.targetBins = [];
                    this.planTargetBinsIndex = 0;
                    console.log('–°–±—Ä–æ—à–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –ª—É–Ω–∫–∏ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—è–¥–æ–≤');

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—è–¥–æ–≤
                    updateSizesBasedOnRows();

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤
                    this.game.updateContainerDimensions();

                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –º–∏—Ä–∞
                    Matter.World.clear(this.game.engine.world);

                    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –º–∏—Ä
                    this.game.createWorld();

                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                    if (this.game.pathManager) {
                        this.game.pathManager.updateDimensions();
                    }

                    if (this.game.pathRenderer) {
                        this.game.pathRenderer.updateDimensions();
                    }

                    if (this.game.physicsManager) {
                        this.game.physicsManager.updateDimensions();
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ—Ä–∑–∏–Ω
                    this.game.updateBinsContainer();

                    // –í—ã–≤–æ–¥–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª—É–Ω–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    setTimeout(() => {
                        if (this.game.binsManager) {
                            const binCount = config.binCount || 0;
                            const coefficients = this.game.binsManager.getDistributedValues(binCount);
                            console.log(`–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª—É–Ω–æ–∫ –¥–ª—è ${newRows} —Ä—è–¥–æ–≤ (${binCount} –ª—É–Ω–æ–∫):`, coefficients);
                        }
                    }, 100);

                    // –í–ê–ñ–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ü–µ–ª–µ–≤—ã—Ö –ª—É–Ω–æ–∫ –ü–û–°–õ–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Ä–∞
                    this.initializeTargetBins();

                    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ —Å ${oldRows} –Ω–∞ ${newRows}`);
                } catch (error) {
                    config.rows = oldRows;
                    rowsSlider.value = oldRows.toString();
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—è–¥–æ–≤:', error);
                }
            }
        });

        slidersContainer.appendChild(rowsContainer);
        slidersContainer.appendChild(ballsContainer);
    }

    createDebugInput() {
        if (!config.showDebugInput) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const existingContainer = document.querySelector('.debug-input-container');
        if (existingContainer) {
            console.log('Debug input container already exists, skipping creation');
            return;
        }

        const debugContainer = document.createElement('div');
        debugContainer.className = 'debug-input-container';

        const debugInput = document.createElement('input');
        debugInput.type = 'text';
        debugInput.id = 'debug-target-bins';
        debugInput.className = 'debug-input';
        debugInput.placeholder = '–ù–æ–º–µ—Ä–∞ –ª—É–Ω–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (1,2,3...)';

        debugContainer.appendChild(debugInput);

        const betButton = document.getElementById('bet-button');
        if (betButton && betButton.parentNode) {
            betButton.parentNode.insertBefore(debugContainer, betButton);
        }
    }

    setupBetButton() {
        const betButton = document.getElementById('bet-button');
        if (!betButton) {
            console.error('Bet button not found, cannot setup');
            return;
        }

        const newButton = betButton.cloneNode(true);
        betButton.parentNode.replaceChild(newButton, betButton);

        newButton.className = 'bet-button';
        newButton.textContent = `Bet (${this.ballCount})`;

        if (this.throwsLeft <= 0) {
            newButton.disabled = true;
            newButton.style.opacity = '0.5';
            newButton.style.cursor = 'not-allowed';
        }

        const self = this;
        newButton.addEventListener('click', function () {
            console.log('====== –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –°–¢–ê–í–ö–ò ======');
            console.log('–í—Ä–µ–º—è –Ω–∞–∂–∞—Ç–∏—è:', new Date().toISOString());
            console.log('–í—ã–±—Ä–∞–Ω–æ —à–∞—Ä–∏–∫–æ–≤:', self.ballCount);

            if (self.throwsLeft <= 0) {
                console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —à–∞—Ä—ã');
                return;
            }

            const betCost = self.ballCount * self.ballCost;
            if (self.balance < betCost) {
                console.log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏: —Ç—Ä–µ–±—É–µ—Ç—Å—è ${betCost}, –¥–æ—Å—Ç—É–ø–Ω–æ ${self.balance}`);
                return;
            }

            if (!self.isFirstBetPlaced) {
                self.isFirstBetPlaced = true;
                if (self.rowsSlider) {
                    self.rowsSlider.disabled = true;
                    self.rowsSlider.style.opacity = '0.5';
                    self.rowsSlider.style.cursor = 'not-allowed';
                    console.log('–°–ª–∞–π–¥–µ—Ä rows –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞');
                }
            }

            self.isGameActive = true;
            self.disableAllSliders();

            let checkInterval = setInterval(() => {
                if (self.game.physicsManager && self.game.physicsManager.getActiveBallsCount() === 0) {
                    self.isGameActive = false;
                    self.enableSlidersAfterGame();
                    console.log('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ª–∞–π–¥–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–∏–Ω—Ç–µ—Ä–≤–∞–ª)');
                    clearInterval(checkInterval);
                    checkInterval = null;
                }
            }, 500);

            if (self.game.gameLogic) {
                self.game.gameLogic.on('gameFinished', function handleGameFinished() {
                    self.isGameActive = false;
                    self.enableSlidersAfterGame();
                    console.log('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ª–∞–π–¥–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—Å–æ–±—ã—Ç–∏–µ)');
                    if (checkInterval) {
                        clearInterval(checkInterval);
                        checkInterval = null;
                    }
                    self.game.gameLogic.off('gameFinished', handleGameFinished);
                });
            }

            self.throwsLeft -= self.ballCount;
            self.throwsLeft = Math.max(0, self.throwsLeft);
            self.balance -= betCost;
            self.updateThrowsAndWins();

            console.log(`–°–¥–µ–ª–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞: ${betCost} (${self.ballCount} —à–∞—Ä–∏–∫–æ–≤ –ø–æ ${self.ballCost})`);
            console.log(`–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (–ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º): ${self.balance}`);
            console.log(`–û—Å—Ç–∞–ª–æ—Å—å —à–∞—Ä–æ–≤: ${self.throwsLeft}`);

            let targetBins = null;
            if (config.showDebugInput) {
                const debugInput = document.getElementById('debug-target-bins');
                if (debugInput && debugInput.value.trim()) {
                    const inputValues = debugInput.value.split(',').map(num => {
                        return parseInt(num.trim(), 10) - 1;
                    }).filter(num => {
                        return !isNaN(num) && num >= 0 && num < config.binCount;
                    });

                    if (inputValues.length > 0) {
                        targetBins = inputValues;
                        console.log('–ò—Å–ø–æ–ª—å–∑—É—é —Ü–µ–ª–µ–≤—ã–µ –ª—É–Ω–∫–∏ –∏–∑ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∏–Ω–ø—É—Ç–∞:', targetBins.map(i => i + 1).join(', '));
                    }
                }
            }

            // üéØ –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ü–µ–ª–µ–π –∏–∑ –ø–ª–∞–Ω–∞, —Å–¥–≤–∏–≥–∞—è –∏–Ω–¥–µ–∫—Å
            if (!targetBins && config.planTargetsBins && config.planTargetsBins.length > 0) {
                targetBins = [];
                for (let i = 0; i < self.ballCount; i++) {
                    const next = config.planTargetsBins[self.planTargetBinsIndex++];
                    if (typeof next === 'number') {
                        targetBins.push(next);
                    }
                }

                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –ª—É–Ω–∫–∏ –∏–∑ planTargetsBins:', targetBins.map(i => i + 1).join(', '));
                console.log('–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å planTargetBinsIndex:', self.planTargetBinsIndex);
            }

            if (targetBins) {
                const originalTargetBins = config.targetBins;
                config.targetBins = targetBins;
                self.game.placeBet(self.ballCount);
                config.targetBins = originalTargetBins;
            } else {
                self.game.placeBet(self.ballCount);
            }

            if (self.throwsLeft <= 0) {
                this.disabled = true;
                this.style.opacity = '0.5';
                this.style.cursor = 'not-allowed';
            }

            self.updateRemainingBalls();
        });
    }


    getBallCount() {
        return this.ballCount;
    }

    updateDimensions() {
        // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.updateThrowsAndWins();
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤
        this.updateRemainingBalls();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞—Ä–∏–∫–∏ –≤ –∏–≥—Ä–µ
    hasActiveBalls() {
        const active = this.game &&
            this.game.physicsManager &&
            this.game.physicsManager.getActiveBallsCount();
        console.log('‚úÖ Active balls count:', active);
        return active > 0;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
    addWin(amount) {
        this.winsAmount += amount;
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
        this.balance += amount;
        this.updateThrowsAndWins();
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∏–≥—Ä—ã—à: ${amount}, –æ–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: ${this.winsAmount}, –±–∞–ª–∞–Ω—Å –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º: ${this.balance}`);

        // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤
        this.updateRemainingBalls();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤
    disableAllSliders() {
        this.sliders.forEach(slider => {
            if (slider) {
                // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä rows, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if (slider === this.rowsSlider && this.isFirstBetPlaced) {
                    return;
                }

                slider.disabled = true;
                slider.style.opacity = '0.5';
                slider.style.cursor = 'not-allowed';
            }
        });
        console.log('–í—Å–µ —Å–ª–∞–π–¥–µ—Ä—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤—Ä–µ–º—è –∏–≥—Ä—ã');
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
    enableSlidersAfterGame() {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–∞–π–¥–µ—Ä—ã –∫—Ä–æ–º–µ rows (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
        this.sliders.forEach(slider => {
            if (!slider) return;

            // –ù–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä rows, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –ø–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫
            if (slider === this.rowsSlider && this.isFirstBetPlaced) {
                return;
            }

            // –î–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (slider === this.ballsSlider) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞—Ä–æ–≤
                // (–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 1, —á—Ç–æ–±—ã —Å–ª–∞–π–¥–µ—Ä –Ω–µ —Å–ª–æ–º–∞–ª—Å—è)
                const maxBalls = Math.max(1, this.throwsLeft);
                slider.max = maxBalls.toString();

                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                if (this.ballCount > this.throwsLeft) {
                    this.ballCount = this.throwsLeft;
                    slider.value = this.ballCount.toString();
                }

                // –ï—Å–ª–∏ —à–∞—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä
                if (this.throwsLeft <= 0) {
                    slider.disabled = true;
                    slider.style.opacity = '0.5';
                    slider.style.cursor = 'not-allowed';
                    return;
                }
            }

            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä
            slider.disabled = false;
            slider.style.opacity = '1';
            slider.style.cursor = 'pointer';
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å—Ç–∞–≤–∫–∏
        const betButton = document.getElementById('bet-button');
        if (betButton) {
            betButton.textContent = `Bet (${this.ballCount})`;
        }

        console.log('–°–ª–∞–π–¥–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã');
    }

    resetPlanTargetBinsIndex() {
        this.planTargetBinsIndex = 0;
        console.log('–ò–Ω–¥–µ–∫—Å planTargetsBins —Å–±—Ä–æ—à–µ–Ω');
    }

    cleanup() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        const containers = [
            '.controls-container',
            '.sliders-container',
            '.money-bet-container',
            '.debug-input-container'
        ];

        containers.forEach(selector => {
            const elements = this.game.container.querySelectorAll(selector);
            elements.forEach(element => {
                if (element && element.parentNode) {
                    element.parentNode.removeChild(element);
                }
            });
        });

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
        const winsContainer = document.getElementById('wins-container');
        if (winsContainer) {
            winsContainer.innerHTML = '';
        }

        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (this.winModalManager) {
            this.winModalManager.cleanup();
            this.winModalManager = null;
        }

        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏
        const betButton = document.getElementById('bet-button');
        if (betButton) {
            const newButton = betButton.cloneNode(false);
            newButton.textContent = 'Bet';
            if (betButton.parentNode) {
                betButton.parentNode.replaceChild(newButton, betButton);
            }
        }

        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–∞–π–¥–µ—Ä—ã
        this.rowsSlider = null;
        this.ballsSlider = null;
        this.sliders = [];
        this.planTargetBinsIndex = 0;
    }
}

export default UIManager;
