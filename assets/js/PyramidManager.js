import Matter from 'matter-js';
import {baseConfig, config} from './config.js';

const { Bodies, World, Events } = Matter;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞–º–∏–¥–æ–π –≥–≤–æ–∑–¥–∏–∫–æ–≤ –≤ –∏–≥—Ä–µ Plinko
 */
class PyramidManager {
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ PyramidManager
     * @param {Object} gameInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–≥—Ä—ã
     * @param {Object} engineWorld - –ú–∏—Ä —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞ Matter.js
     */
    constructor(gameInstance, engineWorld) {
        this.game = gameInstance;
        this.world = engineWorld;
        this.dropArea = { left: 0, right: 0 };
        this.pegs = [];
        this.topRowY = 0;
        this.topRowPegs = []; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–≤–æ–∑–¥–∏–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥–≤–æ–∑–¥–∏–∫–æ–≤
        this.pegAnimations = {};

        // –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–µ–æ–ª–æ–≤ –≥–≤–æ–∑–¥–∏–∫–æ–≤
        this.auras = {};
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    initialize() {
        console.log('PyramidManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ê–Ω–∏–º–∏—Ä—É–µ—Ç –≤—Å–ø—ã—à–∫—É –≥–≤–æ–∑–¥–∏–∫–∞, —Å–æ–∑–¥–∞–≤–∞—è –æ—Ä–µ–æ–ª –∏ –º–µ–Ω—è—è —Ü–≤–µ—Ç —Å–∞–º–æ–≥–æ –≥–≤–æ–∑–¥–∏–∫–∞
     * @param {string} pegLabel - –ú–µ—Ç–∫–∞ –≥–≤–æ–∑–¥–∏–∫–∞
     */
    animatePegFlash(pegLabel) {
        const pegInfo = this.pegAnimations[pegLabel];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–≤–æ–∑–¥–∏–∫–µ –∏ —á—Ç–æ –æ–Ω –Ω–µ –∞–Ω–∏–º–∏—Ä—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å
        if (!pegInfo || pegInfo.isAnimating) return;

        // –ù–∞—Ö–æ–¥–∏–º –≥–≤–æ–∑–¥–∏–∫ –ø–æ –º–µ—Ç–∫–µ
        const peg = this.pegs.find(p => p.label === pegLabel);
        if (!peg) return;

        // –ü–æ–º–µ—á–∞–µ–º –≥–≤–æ–∑–¥–∏–∫ –∫–∞–∫ –∞–Ω–∏–º–∏—Ä—É—é—â–∏–π—Å—è
        pegInfo.isAnimating = true;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
        const originalColor = pegInfo.originalColor;

        // –Ø—Ä–∫–∏–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–ø—ã—à–∫–∏
        const flashColor = '#FFFFFF';

        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≥–≤–æ–∑–¥–∏–∫–∞ –Ω–∞ —è—Ä–∫–∏–π –±–µ–ª—ã–π
        peg.render.fillStyle = flashColor;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ä–µ–æ–ª –¥–ª—è —ç—Ç–æ–≥–æ –≥–≤–æ–∑–¥–∏–∫–∞
        if (this.auras[pegLabel]) {
            // –ï—Å–ª–∏ –æ—Ä–µ–æ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            World.remove(this.world, this.auras[pegLabel]);
            this.auras[pegLabel] = null;
        }

        // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –æ—Ä–µ–æ–ª
        const aura = this.createAura(peg.position.x, peg.position.y, pegLabel);
        World.add(this.world, aura);
        this.auras[pegLabel] = aura;

        // –ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞ - —è—Ä–∫–∞—è –≤—Å–ø—ã—à–∫–∞
        setTimeout(() => {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç –≥–≤–æ–∑–¥–∏–∫–∞
            peg.render.fillStyle = originalColor;

            // –£–¥–∞–ª—è–µ–º –æ—Ä–µ–æ–ª —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            setTimeout(() => {
                if (this.auras[pegLabel]) {
                    World.remove(this.world, this.auras[pegLabel]);
                    this.auras[pegLabel] = null;
                }

                // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
                pegInfo.isAnimating = false;
            }, config.pegAura.duration);
        }, 100);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–∏—Ä–∞–º–∏–¥—É –≥–≤–æ–∑–¥–∏–∫–æ–≤
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∏—Ä–∞–º–∏–¥–µ
     */
    createPyramid() {
        console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥—ã: rows=${config.rows}, pegRadius=${config.pegRadius}, ballRadius=${config.ballRadius}`);
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.pegs = [];
        this.topRowPegs = [];
        this.pegAnimations = {};
        this.auras = {};
        this.clearPegs();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø–∏—Ä–∞–º–∏–¥—ã
        const gameWidth = this.game.width;
        const gameHeight = this.game.height;
        
        console.log(`üéÆ –†–∞–∑–º–µ—Ä—ã –∏–≥—Ä—ã –≤ PyramidManager: ${gameWidth}x${gameHeight}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–∏—Ä–∞–º–∏–¥—ã
        const pyramidBaseWidth = gameWidth - config.pegRadius*2.2;
        const lastRowPegCount = config.topPegs + config.rows - 1;
        const baseHorizontalSpacing = pyramidBaseWidth / (lastRowPegCount - 1);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø–∏—Ä–∞–º–∏–¥—ã
        const actualPyramidWidth = baseHorizontalSpacing * (lastRowPegCount - 1);
        
        console.log(`üìä pyramidBaseWidth=${pyramidBaseWidth}, lastRowPegCount=${lastRowPegCount}, baseHorizontalSpacing=${baseHorizontalSpacing}`);
        console.log(`üìè –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–≤–∞—Å–∞: ${gameWidth}px`);
        console.log(`üìè –†–∞—Å—á–µ—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–∏—Ä–∞–º–∏–¥—ã: ${actualPyramidWidth}px`);
        console.log(`üìè –®–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${this.game.container.offsetWidth}px`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
        // this.addDebugRectangles(gameWidth, gameHeight, actualPyramidWidth);

        // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫
        const topOffset = config.ballRadius * 4;

        // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è —à–∞—Ä–∏–∫–æ–≤ (–¥–∏–∞–º–µ—Ç—Ä —à–∞—Ä–∏–∫–∞)
        const bottomOffset = config.ballRadius * 2;

        // –î–æ—Å—Ç—É–ø–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø–∏—Ä–∞–º–∏–¥—ã
        const availablePyramidHeight = gameHeight - topOffset - bottomOffset;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏, —á—Ç–æ–±—ã –ø–∏—Ä–∞–º–∏–¥–∞ –∑–∞–Ω–∏–º–∞–ª–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        const verticalSpacing = availablePyramidHeight / (config.rows - 1);

        // –û–±–Ω–æ–≤–ª—è–µ–º config.verticalSpacing –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞
        config.verticalSpacing = verticalSpacing;

        // –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞
        const topRowY = topOffset;

        // Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∏–∂–Ω–µ–≥–æ —Ä—è–¥–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–∞ –æ—Ç –Ω–∏–∑–∞ –∫–∞–Ω–≤–∞—Å–∞
        const bottomRowY = gameHeight - bottomOffset - config.pegRadius;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞ –≥–≤–æ–∑–¥–∏–∫–æ–≤
        this.topRowY = topRowY;

        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∫—Ä–∞–π–Ω–∏—Ö –≥–≤–æ–∑–¥–∏–∫–æ–≤
        let leftmostPegX = 0;
        let rightmostPegX = 0;

        // –°–æ–∑–¥–∞–µ–º –≥–≤–æ–∑–¥–∏–∫–∏ –≤ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        for (let row = 0; row < config.rows; row++) {
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–≤–æ–∑–¥–∏–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ä—è–¥—É
            const pegsInRow = config.topPegs + row;

            // –®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä—è–¥–∞ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫—Ä–∞–π–Ω–∏–º–∏ –≥–≤–æ–∑–¥–∏–∫–∞–º–∏ —Ä—è–¥–∞)
            const rowWidth = baseHorizontalSpacing * (pegsInRow - 1);

            // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—è–¥–∞
            const startX = (gameWidth - rowWidth) / 2;

            // –í—ã—á–∏—Å–ª—è–µ–º Y-–ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—è–¥–∞, –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É—è –º–µ–∂–¥—É –≤–µ—Ä—Ö–Ω–∏–º –∏ –Ω–∏–∂–Ω–∏–º —Ä—è–¥–æ–º
            const progress = row / (config.rows - 1);
            const y = topRowY + progress * (bottomRowY - topRowY);

            for (let col = 0; col < pegsInRow; col++) {
                const x = startX + baseHorizontalSpacing * col;

                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–≤–æ–∑–¥–∏–∫–∞
                const pegLabel = `peg_${row}_${col}`;

                const peg = this.createPeg(x, y, pegLabel);
                this.pegs.push(peg);
                World.add(this.world, peg);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –≥–≤–æ–∑–¥–∏–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                this.pegAnimations[pegLabel] = {
                    originalColor: config.colors.peg,
                    isAnimating: false
                };

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫—Ä–∞–π–Ω–∏—Ö –≥–≤–æ–∑–¥–∏–∫–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞
                if (row === 0) {
                    if (col === 0) {
                        leftmostPegX = x;
                    }
                    if (col === pegsInRow - 1) {
                        rightmostPegX = x;
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–≤–æ–∑–¥–∏–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞
                    this.topRowPegs.push(peg);
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–∞–¥–µ–Ω–∏—è —à–∞—Ä–æ–≤
        this.dropArea = {
            left: leftmostPegX,
            right: rightmostPegX
        };

        console.log(`–ü–∏—Ä–∞–º–∏–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: –≤–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ –Ω–∞ Y=${this.topRowY}, –Ω–∏–∂–Ω–∏–π —Ä—è–¥ –Ω–∞ Y=${bottomRowY}, verticalSpacing=${verticalSpacing}`);
        console.log(`–û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É: ${bottomOffset}px, –ø–æ–ª–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏–≥—Ä—ã: ${gameHeight}px`);

        return {
            topRowY: this.topRowY,
            dropArea: this.dropArea,
            pyramidHeight: bottomRowY - topRowY
        };
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω –≥–≤–æ–∑–¥–∏–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
     * @param {string} label - –ú–µ—Ç–∫–∞ –≥–≤–æ–∑–¥–∏–∫–∞
     * @returns {Object} –û–±—ä–µ–∫—Ç –≥–≤–æ–∑–¥–∏–∫–∞ Matter.js
     */
    createPeg(x, y, label = 'peg') {
        return Bodies.circle(x, y, config.pegRadius, {
            isStatic: true,
            render: {
                fillStyle: config.colors.peg
            },
            friction: config.pegFriction,          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            restitution: config.pegRestitution,    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç—Å–∫–æ–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            label: label,
            collisionFilter: {
                category: 0x0002, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≥–≤–æ–∑–¥–∏–∫–æ–≤
                mask: 0xFFFFFFFF  // –°—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ä–µ–æ–ª –≤–æ–∫—Ä—É–≥ –≥–≤–æ–∑–¥–∏–∫–∞
     * @param {number} x - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –≥–≤–æ–∑–¥–∏–∫–∞
     * @param {number} y - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≥–≤–æ–∑–¥–∏–∫–∞
     * @param {string} label - –ú–µ—Ç–∫–∞ –≥–≤–æ–∑–¥–∏–∫–∞
     * @returns {Object} –û–±—ä–µ–∫—Ç –æ—Ä–µ–æ–ª–∞ Matter.js
     */
    createAura(x, y, label) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–µ–æ–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const auraParams = config.pegAura;

        // –†–∞–¥–∏—É—Å –æ—Ä–µ–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const auraRadius = config.pegRadius * auraParams.radiusMultiplier;

        // –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –æ—Ä–µ–æ–ª
        const aura = Bodies.circle(x, y, auraRadius, {
            isStatic: true,
            isSensor: true, // –û—Ä–µ–æ–ª –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
            render: {
                fillStyle: `rgba(255, 255, 255, ${auraParams.opacity})`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                opacity: 1, // –û–±—â–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞
                lineWidth: 0 // –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã
            },
            label: `aura_${label}`,
            collisionFilter: {
                category: 0x0002,
                mask: 0x0000 // –ù–µ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è –Ω–∏ —Å —á–µ–º
            }
        });

        return aura;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥–µ –≥–≤–æ–∑–¥–∏–∫–æ–≤
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏—è—Ö –≥–≤–æ–∑–¥–∏–∫–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥–µ
     */
    getLastRowInfo() {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const rows = config.rows;

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–≤–æ–∑–¥–∏–∫–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        const lastRowPegCount = config.topPegs + rows - 1;

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≥–≤–æ–∑–¥–∏–∫–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä—è–¥–∞
        const lastRowPositions = [];

        // –ù–∞—Ö–æ–¥–∏–º –≥–≤–æ–∑–¥–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä—è–¥–∞ (–æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏)
        const lastRowStartIndex = this.pegs.length - lastRowPegCount;

        for (let i = lastRowStartIndex; i < this.pegs.length; i++) {
            lastRowPositions.push(this.pegs[i].position.x);
        }

        return {
            pegCount: lastRowPegCount,
            positions: lastRowPositions,
            // –ì–ª—É–±–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä—è–¥–∞
            depth: this.pegs[this.pegs.length - 1].position.y + config.pegRadius
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–∞–º–∏–¥–µ, –≤–∫–ª—é—á–∞—è –ø–æ–∑–∏—Ü–∏–∏ –≥–≤–æ–∑–¥–∏–∫–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Ä–∞–º–∏–¥–µ
     */
    getPyramidInfo() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Ä–∞–º–∏–¥–∞ —Å–æ–∑–¥–∞–Ω–∞
        if (!this.pegs || this.pegs.length === 0) {
            return null;
        }

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≥–≤–æ–∑–¥–∏–∫–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞
        const topRow = [];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–≤–æ–∑–¥–∏–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞
        for (const peg of this.topRowPegs) {
            if (peg && peg.position) {
                topRow.push(peg.position.x);
            }
        }

        return {
            topRow: topRow,
            topRowY: this.topRowY,
            dropArea: this.dropArea
        };
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≥–≤–æ–∑–¥–∏–∫–∏ –∏ –∏—Ö –æ—Ä–µ–æ–ª—ã –∏–∑ –º–∏—Ä–∞
     */
    clearPegs() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ä–µ–æ–ª—ã
        for (const pegLabel in this.auras) {
            if (this.auras[pegLabel]) {
                World.remove(this.world, this.auras[pegLabel]);
            }
        }
        this.auras = {};

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≥–≤–æ–∑–¥–∏–∫–∏
        for (const peg of this.pegs) {
            World.remove(this.world, peg);
        }
        this.pegs = [];
        this.topRowPegs = [];
        this.pegAnimations = {};
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ä–∞–º–∏–¥—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–≥—Ä—ã
     * @param {number} width - –ù–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     * @param {number} height - –ù–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    updateDimensions(width, height) {
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–∏—Ä–∞–º–∏–¥—É —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        return this.createPyramid();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä–æ–ø–∑–æ–Ω–µ –∏ –≤–µ—Ä—Ö–Ω–µ–º —Ä—è–¥–µ –≥–≤–æ–∑–¥–∏–∫–æ–≤
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä–æ–ø–∑–æ–Ω–µ
     */
    getDropInfo() {
        return {
            dropArea: this.dropArea,
            topRowY: this.topRowY
        };
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏—Ü
     */
    addDebugRectangles(gameWidth, gameHeight, pyramidWidth) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.removeDebugRectangles();
        
        // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≥—Ä–∞–Ω–∏—Ü –∫–∞–Ω–≤–∞—Å–∞ (–∫—Ä–∞—Å–Ω—ã–π)
        const canvasBorder = Bodies.rectangle(gameWidth/2, gameHeight/2, gameWidth, gameHeight, {
            isStatic: true,
            isSensor: true,
            render: {
                fillStyle: 'transparent',
                strokeStyle: '#ff0000',
                lineWidth: 3
            },
            label: 'debug_canvas_border'
        });
        
        // –õ–∏–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞ (–∑–µ–ª–µ–Ω–∞—è)
        const centerLine = Bodies.rectangle(gameWidth/2, gameHeight/2, 2, gameHeight, {
            isStatic: true,
            isSensor: true,
            render: {
                fillStyle: '#00ff00',
                strokeStyle: '#00ff00',
                lineWidth: 2
            },
            label: 'debug_center_line'
        });
        
        // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–∏—Ä–∞–º–∏–¥—ã (—Å–∏–Ω–∏–π)
        const pyramidCenter = config.pegRadius + pyramidWidth/2;
        const pyramidBorder = Bodies.rectangle(pyramidCenter, gameHeight/2, pyramidWidth, gameHeight, {
            isStatic: true,
            isSensor: true,
            render: {
                fillStyle: 'transparent',
                strokeStyle: '#0000ff',
                lineWidth: 3
            },
            label: 'debug_pyramid_border'
        });
        
        World.add(this.world, [canvasBorder, centerLine, pyramidBorder]);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        this.debugElements = [canvasBorder, centerLine, pyramidBorder];
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
     */
    removeDebugRectangles() {
        if (this.debugElements) {
            for (const element of this.debugElements) {
                World.remove(this.world, element);
            }
            this.debugElements = [];
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    cleanup() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ä–µ–æ–ª—ã
        for (const pegLabel in this.auras) {
            if (this.auras[pegLabel]) {
                World.remove(this.world, this.auras[pegLabel]);
            }
        }
        this.auras = {};

        // –£–¥–∞–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.removeDebugRectangles();

        // –û—á–∏—â–∞–µ–º –≥–≤–æ–∑–¥–∏–∫–∏
        this.clearPegs();
    }
}

export default PyramidManager;
