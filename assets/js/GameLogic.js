import { config } from './config.js';
import Matter from 'matter-js';

const { Events } = Matter;

class GameLogic {
    constructor(gameInstance, engine, pyramidManager, physicsManager, binsManager, pathManager, uiManager) {
        this.game = gameInstance;
        this.engine = engine;
        this.pyramidManager = pyramidManager;
        this.physicsManager = physicsManager;
        this.binsManager = binsManager;
        this.pathManager = pathManager;
        this.uiManager = uiManager;

        this.score = 0;
        this.betAmount = 10;
        this.ballCost = config.ballCost || 10;
        this.gameState = 'idle';
        this.lastBallId = 0;

        this.lastResult = {
            binIndex: -1,
            multiplier: 0,
            win: 0,
        };

        this.gameHistory = [];
        this.eventListeners = [];
        this.processedBalls = new Set();
    }

    initialize() {
        const afterUpdateHandler = () => {
            this.physicsManager.checkBallsOutOfBounds();
            this.checkBallsInBins();
        };

        Events.on(this.engine, 'afterUpdate', afterUpdateHandler);
        this.eventListeners.push({ event: 'afterUpdate', handler: afterUpdateHandler });

        this.physicsManager.onBallInBin = (ballId, binIndex) => {
            this.processBallInBin(ballId, binIndex);
        };
    }

    placeBet(amount = this.betAmount, ballCount = config.defaultBallCount, targetBinIndex = null) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
        // if (this.gameState === 'playing') {
        //     return false;
        // }

        this.betAmount = amount;
        this.gameState = 'playing';

        // –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏–∫—É —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç—Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ç–µ–ø–µ—Ä—å
        // —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ UIManager.setupBetButton
        // if (this.uiManager) {
        //     const betCost = this.uiManager.ballCost * ballCount;
        //     this.uiManager.balance -= betCost;
        //     this.uiManager.updateBalanceDisplay();
        //     console.log(`–°–¥–µ–ª–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞: ${betCost} (${ballCount} —à–∞—Ä–∏–∫–æ–≤ –ø–æ ${this.uiManager.ballCost})`);
        //     console.log(`–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${this.uiManager.balance}`);
        // }

        // –ù–æ–≤—ã–µ —à–∞—Ä–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è, –∞ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç –ø–∞–¥–∞—Ç—å
        this.lastBallId = this.physicsManager.currentBallId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π ID —à–∞—Ä–∏–∫–∞

        this.lastResult = {
            binIndex: -1,
            multiplier: 0,
            win: 0,
        };

        this.game.placeBet(ballCount, targetBinIndex);

        this.triggerEvent('betPlaced', {
            amount: this.betAmount,
            ballCount: ballCount,
            targetBinIndex: targetBinIndex
        });

        return true;
    }

    checkBallsInBins() {
        const activeBallsCount = this.physicsManager.getActiveBallsCount();

        // –ú–µ–Ω—è–µ–º —É—Å–ª–æ–≤–∏–µ: —Ç–µ–ø–µ—Ä—å –∏–≥—Ä–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "finished",
        // –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ä–∏–∫–æ–≤, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –ø–æ–∑–≤–æ–ª—è–µ–º –¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
        // –ø–æ–∫–∞ —Å—Ç–∞—Ä—ã–µ —à–∞—Ä–∏–∫–∏ –≤—Å–µ –µ—â–µ –≤ –∏–≥—Ä–µ.
        // console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–∞–ª–∫—É (checkBallsInBins)", this.gameState, activeBallsCount);
        if (activeBallsCount === 0 && this.gameState !== 'finished') {
            this.gameState = 'finished';

            this.triggerEvent('gameFinished', {
                result: this.lastResult,
                history: this.gameHistory
            });

            console.log("–ü–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –º–æ–¥–∞–ª–∫—É");
            if (this.uiManager) {
                const wins = this.uiManager.winsAmount;
                const target = config.targetWins || 0;

                // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
                // 1. –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ü–µ–ª–µ–≤–æ–π –≤—ã–∏–≥—Ä—ã—à
                // 2. –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ä–æ–≤
                // 3. –ë–æ–ª—å—à–µ –Ω–µ—Ç —à–∞—Ä–æ–≤ –¥–ª—è –±—Ä–æ—Å–∫–∞
                const noMoreThrows = this.uiManager.throwsLeft <= 0;

                console.log("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–∫–∏:", {
                    wins,
                    target,
                    throwsLeft: this.uiManager.throwsLeft,
                    activeBalls: activeBallsCount,
                    noMoreThrows
                });

                if (noMoreThrows) {
                    setTimeout(() => {
                        console.log("‚úÖ –°—Ç–∞—Ä—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ checkBallsInBins)");
                        this.uiManager.showWinModal(wins);
                    }, 500);
                }
            }
        }
    }
    processBallInBin(ballId, binIndex) {
        if (this.processedBalls.has(ballId)) {
            return;
        }

        this.processedBalls.add(ballId);

        const multiplier = this.binsManager.getMultiplier(binIndex);

        if (this.uiManager) {
            // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –≤—ã–∏–≥—Ä—ã—à = –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ª—É–Ω–∫–∏
            const win = multiplier;

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –∫ —Å—É–º–º–µ –≤—ã–∏–≥—Ä—ã—à–µ–π, –∞ –Ω–µ –∫ –±–∞–ª–∞–Ω—Å—É –Ω–∞–ø—Ä—è–º—É—é
            this.uiManager.addWin(win);

            console.log(`–®–∞—Ä–∏–∫ ${ballId} –ø–æ–ø–∞–ª –≤ –ª—É–Ω–∫—É ${binIndex} —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º ${multiplier}.`);
            console.log(`–í—ã–∏–≥—Ä—ã—à: $${win}`);
        }

        this.lastResult = {
            binIndex: binIndex,
            multiplier: multiplier,
            win: this.ballCost * multiplier
        };

        this.binsManager.animateBlockFlash(binIndex);

        if (this.uiManager) {
            this.gameHistory.push({
                time: new Date(),
                binIndex: binIndex,
                multiplier: multiplier,
                win: this.lastResult.win,
                betAmount: this.betAmount,
                ballId: ballId  // –î–æ–±–∞–≤–ª—è–µ–º ID —à–∞—Ä–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            });
        }

        if (this.gameHistory.length > 50) {
            this.gameHistory.shift();
        }

        this.triggerEvent('ballInBin', {
            ballId: ballId,
            binIndex: binIndex,
            multiplier: multiplier,
            win: this.lastResult.win
        });
    }

    resetGame(clearBalls = true) {
        // –û—á–∏—â–∞–µ–º —à–∞—Ä–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä clearBalls —Ä–∞–≤–µ–Ω true
        if (clearBalls) {
            this.physicsManager.clearBalls();
        }

        this.gameState = 'idle';
        this.score = 0;
        this.lastResult = {
            binIndex: -1,
            multiplier: 0,
            win: 0,
        };

        // –ù–µ –æ—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —à–∞—Ä–∏–∫–∏ –ø—Ä–∏ resetGame(false)
        if (clearBalls) {
            this.processedBalls.clear();
        }

        this.triggerEvent('gameReset', {
            clearBalls: clearBalls
        });
    }

    setBetAmount(amount) {
        this.betAmount = amount;
    }

    on(eventName, callback) {
        if (!this.events) {
            this.events = {};
        }

        if (!this.events[eventName]) {
            this.events[eventName] = [];
        }

        this.events[eventName].push(callback);
    }

    off(eventName, callback) {
        if (!this.events || !this.events[eventName]) {
            return;
        }

        this.events[eventName] = this.events[eventName].filter(cb => cb !== callback);
    }

    triggerEvent(eventName, data) {
        if (!this.events || !this.events[eventName]) {
            return;
        }

        this.events[eventName].forEach(callback => {
            callback(data);
        });
    }

    cleanup() {
        this.eventListeners.forEach(({ event, handler }) => {
            Events.off(this.engine, event, handler);
        });

        this.eventListeners = [];
        this.events = {};
    }

    getGameState() {
        return {
            state: this.gameState,
            score: this.score,
            betAmount: this.betAmount,
            lastResult: this.lastResult,
            history: this.gameHistory
        };
    }
}

export default GameLogic;
